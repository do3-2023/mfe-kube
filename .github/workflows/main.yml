name: Main workflow (check & build push docker)

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  checks-api:
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@stable
        name: Install the Rust toolchain
        with:
          components: clippy, rustfmt

      - uses: Swatinem/rust-cache@v2
        name: Use cached dependencies and artifacts
        with:
          workspaces: ./api

      - name: Check formatting
        run: cargo fmt --check
        working-directory: ./api

      - name: Run lint
        run: cargo clippy -- -D warnings
        working-directory: ./api

  checks-web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install modules
        run: yarn install --frozen-lockfile
        working-directory: ./web

      - name: Run ESLint
        run: yarn lint
        working-directory: ./web

  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - context: ./api
            image: ghcr.io/${{ github.repository_owner }}/mfe-kube/api
          - context: ./web
            image: ghcr.io/${{ github.repository_owner }}/mfe-kube/web
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ matrix.image }}
          tags: |
            type=semver,pattern={{version}}
            latest

      - name: Login to github container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
